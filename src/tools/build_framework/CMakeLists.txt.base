# Copyright 2014 asarcar Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Author: Arijit Sarcar <sarcar_a@yahoo.com>

#
# File included at the very beginning of the CMakiLists.txt
# in CMAKE_SOURCE_DIR
#

#######################################################
#                Validate Environment                 #
#######################################################
find_package(Doxygen)
if (NOT DOXYGEN_FOUND)
  message(FATAL_ERROR 
    "Doxygen needed to build the documentation. Please install it correctly")
endif(NOT DOXYGEN_FOUND)

find_package(GTest REQUIRED)
if (NOT GTEST_FOUND)
  message(FATAL_ERROR 
    "GTest needed to test code. Please install it correctly")
endif()

##############################################
#                 Settings                   #
##############################################
# Where to find cmake modules.
set(CMAKE_MODULE_PATH ${CMAKE_BUILD_FRAMEWORK_DIR})
message("CMAKE_MODULE_PATH is ${CMAKE_MODULE_PATH}")

# Additional debug settings: REMOVE LATER
include(${CMAKE_BUILD_FRAMEWORK_DIR}/CMakeLists.txt.dbg)

#######################################
# Enable Dashboard Scripting or CTest #
#######################################
if (CMAKE_DASHBOARD_SCRIPTING)
  include (CTest)   
else (CMAKE_DASHBOARD_SCRIPTING)
  if (CMAKE_UNIT_TESTS)
    enable_testing()
    message("CTest Enabled")
  endif (CMAKE_UNIT_TESTS)
endif (CMAKE_DASHBOARD_SCRIPTING)

#######################################################
#                Directory Settings                   #
#######################################################
get_filename_component(CMAKE_BASE_DIR ${CMAKE_SOURCE_DIR}/.. ABSOLUTE)
set(CMAKE_BIN_DIR ${CMAKE_BASE_DIR}/bin)
set(CMAKE_UNIT_TESTS_DIR ${CMAKE_BIN_DIR}/unit_tests)
set(CMAKE_DOC_DIR ${CMAKE_BASE_DIR}/doc)
set(CMAKE_LIB_DIR ${CMAKE_BASE_DIR}/lib)
set(CMAKE_INC_DIR ${CMAKE_BASE_DIR}/include)
set(CMAKE_DATA_DIR ${CMAKE_BASE_DIR}/data)

# Location of INSTALL when relative path is used
set(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR})
# Location of Build framework
set(CMAKE_BUILD_FRAMEWORK_DIR ${CMAKE_SOURCE_DIR}/tools/build_framework)
# Location of cmake modules.
set(CMAKE_MODULE_PATH "${CMAKE_BUILD_FRAMEWORK}")

###############################################
#                Build settings               #
###############################################
#  (1) Debug: 
#        Includes debugging symbols, does NOT produce optimized
#        code, includes debugging assertions. 
#        Suitable for DEV, UT, and system functionality testing.
#  (2) Release: 
#        Includes debugging symbols, produces optimized code, does NOT 
#        include debugging assertions. 
#        Suitable for system performance, benchmarking, and 
#        release ready production binaries for customers.

if (CMAKE_BUILD_TYPE STREQUAL Debug)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
  set(BUILD_POSTFIX "_d")
else (CMAKE_BUILD_TYPE STREQUAL Debug)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O3 -DNDEBUG")
  set(BUILD_POSTFIX "")
endif (CMAKE_BUILD_TYPE STREQUAL Debug)

######################################################
#         C/C++ Complier related settings            #
######################################################
# ccache.samba.org: 
#   ccache is a compiler cache. It speeds up recompilation 
#   by caching previous compilations and detecting when the same 
#   compilation is being done again. Only works with GNU.
set(CMAKE_CXX_COMPILER "ccache")
set(CMAKE_CXX_COMPILER_ARG1 "g++")
# code.google.com/p/distcc: 
#   when compilation times become a problem we can look
#   at distcc: by replacing ccache with distcc.

# Set common compiler flags:
# 1. -Werror: to treat all warnings as errors and fail compilation
# 2. -Wall: validate all kinds of checks and give warnings
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror -Wall")

# 4. -D__STDC_FORMAT_MACROS: allows one to use format macros PRIu64
#     e.g. printf("test uint64_t : %" PRIu64 "\n", ui64);
# 5. -D_GNU_SOURCE: Enable all non-standard GNU Extensions
#    5.1. access to traditional functions which were omitted from 
#         the POSIX standard (often for good reason, such as being 
#         replaced with better alternatives, or being tied to particular 
#         legacy implementations)
#    5.2. access to low-level functions that cannot be portable, but 
#         that you sometimes need for implementing system utilities 
#         like mount, ifconfig, etc.
#    5.3. broken behavior for lots of POSIX-specified functions, where 
#         the GNU folks disagreed with the standards committee on how 
#         the functions should behave and decided to do their own thing.
#    5.4. enables a whole lot of compiling flags: STRICT_ANSI, 
#         _ISOC99_SOURCE, _POSIX_SOURCE, _POSIX_C_SOURCE, _XOPEN_SOURCE, 
#         _XOPEN_SOURCE_EXTENDED, _LARGEFILE_SOURCE, _LARGEFILE64_SOURCE, 
#         _FILE_OFFSET_BITS=N, _BSD_SOURCE, _SVID_SOURCE
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__STDC_FORMAT_MACROS -D_GNU_SOURCE")

# 6. -fno-omit-frame-pointer: Keep the frame pointer for all functions.
#    The omit-frame-pointer is enabled at several optimization levels.
#    The intent was to avoid the instructions to save, set up and restore 
#    frame pointers; it also made an extra register available in many fns. 
#    It made debugging impossible on some machines.
# 7. -funsigned-char: let the type "char" be interpreted as "unsigned" entity
#    Each kind of machine has a default for what char should be. It is either 
#    like unsigned char by default or like signed char by default. Since 
#    linux based SW and most open source code (e.g. from google) were written 
#    with unsigned char in mind, we stick to that option. 
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer -funsigned-char")

# 8. -mcx16: Enables GCC to use CMPXCHG16B instruction in generated code. 
#    CMPXCHG16B allows for atomic operations on 128-bit double quadword 
#    (or oword) data types. 
#    This is useful for high resolution counters that could be updated by 
#    multiple processors (or cores). This instruction is generated as part 
#    of atomic built-in functions.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcx16")

# 9. -fno-builtin-malloc -fno-builtin-calloc 
#    -fno-builtin-realloc -fno-builtin-free
#    While strictly not required when using tcmalloc, these options are 
#    for the paranoid to ensure that all memory management routines
#    never refer to the one provided by gcc
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-malloc") 
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-calloc")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-realloc")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-free")

# Set C Compiler options in case we ever use vanilla C modules for integration
set(CMAKE_C_COMPILER ${CMAKE_CXX_COMPILER})
set(CMAKE_C_COMPILER_ARG1 "gcc")
set(CMAKE_C_FLAGS ${CMAKE_CXX_FLAGS})

# Finally we set the C++11 compiler option
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

# Set the compiler's include paths.
include_directories(${CMAKE_SOURCE_DIR})

########################################
#                Functions             #
########################################
function(setup_custom_headers HDR_LIST)
  # Figure out the relative path of the current dir wrt to the top directory.
  file(RELATIVE_PATH relative_curr_path 
       ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
  # Compute the directory where the header should go.
  get_filename_component(NEW_HDR_DIR ${CMAKE_INC_DIR}/${relative_curr_path} ABSOLUTE)
  foreach(CUR_HDR_FILE ${HDR_LIST})
    install(FILES "${CUR_HDR_FILE}" DESTINATION "${NEW_HDR_DIR}")
  endforeach(CUR_HDR_FILE)
  message(STATUS "Installed Headers: \"${HDR_LIST}\"")
endfunction(setup_custom_headers HDR_LIST)

function(setup_custom_target target_name)
  set_property(TARGET ${target_name} 
               PROPERTY RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BIN_DIR}")
  set_property(TARGET ${target_name} 
               PROPERTY LIBRARY_OUTPUT_DIRECTORY "${CMAKE_LIB_DIR}")
  set_property(TARGET ${target_name} 
               PROPERTY ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_LIB_DIR}")
  set_property(TARGET ${target_name} 
               PROPERTY OUTPUT_NAME "${target_name}${BUILD_POSTFIX}")
  install(TARGETS ${target_name} 
          RUNTIME DESTINATION "${CMAKE_BIN_DIR}" 
          LIBRARY DESTINATION "${CMAKE_LIB_DIR}" 
          ARCHIVE DESTINATION "${CMAKE_LIB_DIR}")
  message(STATUS "Registered target \"${target_name}\".")
endfunction(setup_custom_target target_name)

function(setup_unit_test_program target_name)
  # Figure out the relative path of the current dir wrt to the top directory.
  file(RELATIVE_PATH relative_curr_path 
       ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
  # Truncate the tests directory where unit tests are typically kept
  # Compute the directory where the executable & generated output would go.
  get_filename_component(UT_BIN_DIR 
                         ${CMAKE_UNIT_TESTS_DIR}/${relative_curr_path}
			 PATH)
  set_property(TARGET ${target_name} 
               PROPERTY RUNTIME_OUTPUT_DIRECTORY "${UT_BIN_DIR}")
  set_property(TARGET ${target_name} 
               PROPERTY OUTPUT_NAME "${target_name}${BUILD_POSTFIX}")
endfunction(setup_unit_test_program target_name)

function(register_test test_name)
  set(test_command 
      "${test_command} ${CMAKE_CURRENT_BINARY_DIR}/${test_name}${BUILD_POSTFIX}")
  set(test_command 
      "${test_command} --auto_test=true")    

  # We support optional arguments to this function - they'll all be passed on
  # to the test.
  foreach(optional_arg ${ARGN})
    set(test_command "${test_command} ${optional_arg}")
  endforeach(optional_arg)

  # Run the test.
  add_test(${test_name} /bin/sh -c "${test_command}")

  # Set the test timeout and environment.
  set(test_env "SOURCE_DIR=${CMAKE_SOURCE_DIR}")

  set(test_env "${test_env};HEAPCHECK_DUMP_DIRECTORY=${CMAKE_CURRENT_BINARY_DIR}")
  set(test_env "${test_env};PPROF_PATH=/usr/bin/google-pprof")

  # HeapProfiler and CPUProfiler: Not enabled in tests: however the executables
  # are profile ready as they are linked using -lprofiler and -ltcmalloc
  # Beware of a linker issue in g++ that may require to use LD_PRELOAD to 
  # ensure CPU profiler works.
  # > env LD_PRELOAD=/path/to/libprofiler.so env CPUPROFILE=myctest.cprof ./myctest ...
  #
  # set(heap_prof_name "${CMAKE_CURRENT_BINARY_DIR}/${test_name}${BUILD_POSTFIX}.hprof")
  # set(test_env "${test_env};HEAPPROFILE=${heap_prof_name}")
  # set(cpu_prof_name "${CMAKE_CURRENT_BINARY_DIR}/${test_name}${BUILD_POSTFIX}.cprof")
  # set(test_env "${test_env};CPUPROFILE=${cpu_prof_name}")
  #

  set(test_env "${test_env};TEST_OUTPUT_DIR=${CMAKE_CURRENT_BINARY_DIR}")

  set_tests_properties(${test_name} PROPERTIES TIMEOUT 45
                       ENVIRONMENT "${test_env}")
  set_property(TARGET ${test_name} 
               PROPERTY OUTPUT_NAME "${test_name}${BUILD_POSTFIX}")

endfunction(register_test)

function(register_test_profile test_name)
  set(test_command 
      "${test_command} ${CMAKE_CURRENT_BINARY_DIR}/${test_name}${BUILD_POSTFIX}")
  set(test_command 
      "${test_command} --auto_test=true")    

  # We support optional arguments to this function - they'll all be passed on
  # to the test.
  foreach(optional_arg ${ARGN})
    set(test_command "${test_command} ${optional_arg}")
  endforeach(optional_arg)

  # Run the test.
  add_test(${test_name} /bin/sh -c "${test_command}")

  # Set the test timeout and environment.
  set(test_env "SOURCE_DIR=${CMAKE_SOURCE_DIR}")

  set(test_env "${test_env};HEAPCHECK_DUMP_DIRECTORY=${CMAKE_CURRENT_BINARY_DIR}")
  set(test_env "${test_env};PPROF_PATH=/usr/bin/google-pprof")
  set(test_env "${test_env};HEAPCHECK=normal")

  # HeapProfiler and CPUProfiler: Not enabled in tests: however the executables
  # are profile ready as they are linked using -lprofiler and -ltcmalloc
  # Beware of a linker issue in g++ that may require to use LD_PRELOAD to 
  # ensure CPU profiler works.
  # > env LD_PRELOAD=/path/to/libprofiler.so env CPUPROFILE=myctest.cprof ./myctest ...
  #
  # set(heap_prof_name "${CMAKE_CURRENT_BINARY_DIR}/${test_name}${BUILD_POSTFIX}.hprof")
  # set(test_env "${test_env};HEAPPROFILE=${heap_prof_name}")
  # set(cpu_prof_name "${CMAKE_CURRENT_BINARY_DIR}/${test_name}${BUILD_POSTFIX}.cprof")
  # set(test_env "${test_env};CPUPROFILE=${cpu_prof_name}")
  #

  set(test_env "${test_env};TEST_OUTPUT_DIR=${CMAKE_CURRENT_BINARY_DIR}")

  set_tests_properties(${test_name} PROPERTIES TIMEOUT 45
                       ENVIRONMENT "${test_env}")
  set_property(TARGET ${test_name} 
               PROPERTY OUTPUT_NAME "${test_name}${BUILD_POSTFIX}")

endfunction(register_test_profile)

